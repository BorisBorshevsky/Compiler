package IC.Parser;
import IC.Parser.Token;
import java_cup.runtime.*;
import IC.AST.*;
import java.util.List;
import java.util.ArrayList;

/* Parser code */

parser code  {:
	/** Causes the parsr to print every token it reads.
	 * This is useful for debugging.
	 */
	public boolean printTokens;
	
	private Lexer lexer;
	private int arrayDimentionCounter = 0;
	
	public LibParser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
	}
	
	public void syntax_error(Symbol s)
	{

	}
	
	public void report_error(String message, Object info)
	{
	
	}
	
	public void unrecovered_syntax_error(Symbol cur_token)
	{
	
	}
:}

/* Preliminaries to set up and use the scanner.  */
scan with {: 	
	return lexer.next_token();
	:};

// Punctuation marks
terminal LP, RP, LB, RB, LCBR, RCBR, SEMI, DOT, COMMA;
// Keywords
terminal CLASS, EXTENDS, STATIC, VOID, INT, BOOLEAN, STRING, RETURN;
terminal IF, ELSE, WHILE, BREAK, CONTINUE, THIS, NEW, LENGTH, TRUE, FALSE, NULL;

// Stuff that have text in them
// Decision: Conversion to Integer will be done NOT here.
terminal String ID, CLASS_ID, INTEGER, QUOTE;

// Assignment operator
terminal ASSIGN;

// Boolean operators
terminal EQUAL, NEQUAL, LT, GT, LTE, GTE;

// Binary operators
terminal BinaryOps PLUS, MINUS, MULTIPLY, DIVIDE, MOD;

// Unary operators
terminal UnaryOps UMINUS, LNEG;

// Conditional operators
terminal LAND, LOR;

/* Non terminals */
non terminal ICClass libic;
non terminal LibraryMethod libmethod;
non terminal List<Method> libmethod_list;
non terminal List<Formal> formal_list_inter, formal_list, extra_formals;
non terminal Formal formal;
non terminal Type type, method_type;


precedence left ELSE;
precedence left IF;

precedence right ASSIGN;
precedence left LOR;
precedence left LAND;
precedence left EQUAL, NEQUAL;
precedence left GTE, GT, LT, LTE;
precedence left MINUS, PLUS;
precedence left MULTIPLY, DIVIDE, MOD;
precedence right UMINUS, LNEG;
precedence left DOT, LP, RP, LB, RB;








/* The grammar */

libic ::= CLASS:ck CLASS_ID:cid LCBR libmethod_list:ml RCBR
		{: RESULT = new ICClass(ckleft, cid.toString(), new ArrayList<Field>(), ml); :}
;


libmethod_list ::= libmethod_list:ml libmethod:m
		{: ml.add(m); RESULT = ml; :} 
		| 
		{: RESULT = new ArrayList<Method>(); :} 
;

libmethod ::= STATIC method_type:mt ID:id LP formal_list_inter:fl RP SEMI
		{: RESULT = new LibraryMethod(mt, id.toString(), fl); :}
;

method_type ::= VOID:v
		{: RESULT = new PrimitiveType(vleft, IC.DataTypes.VOID); :}
		| type:t
		{: RESULT = t; :}
;

type ::= type:t LB RB
		{: t.incrementDimension(); RESULT = t; :}
		| INT:intKey
		{: RESULT = new PrimitiveType(intKeyleft, IC.DataTypes.INT); :}
		| BOOLEAN:boolKey
		{: RESULT = new PrimitiveType(boolKeyleft, IC.DataTypes.BOOLEAN); :}
		| STRING:strKey
		{: RESULT = new PrimitiveType(strKeyleft, IC.DataTypes.STRING); :}
		| CLASS_ID:c
		{: RESULT = new UserType(cleft, c.toString()); :}
;

formal_list_inter ::= 
		{: RESULT = new ArrayList<Formal>(); :}
		| formal_list:fl
		{: RESULT =  fl; :}
;

formal_list ::= formal:f extra_formals:ef 
		{: ef.add(0, f); RESULT = ef; :} 
;

extra_formals ::= 
		{: RESULT = new ArrayList<Formal>(); :}
		| COMMA formal:f extra_formals:ef
		{: ef.add(0, f); RESULT = ef; :} 
;

formal ::= type:t ID:fName
		{: RESULT = new Formal(t, fName.toString()); :}
;
