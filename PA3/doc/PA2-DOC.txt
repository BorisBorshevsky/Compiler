CLASS HIERARCHY

________
PACKAGES
--------


IC: Has the Compiler main class and some basic types that define the IC language.
IC.Parser package: Does lexical and syntactic analysis.
IC.AST package: Holds types of AST nodes for syntax analysis.

package IC:

> Compiler.java - runs a parser for two files: the Library signature file is parsed with IC.Parser.LibParser and the IC source file is parsed with IC.Parser.Parser.
> BinaryOps.java, DataTypes.java, LiteralTypes.java and UnaryOps.java - Those classes that represent aspects of the IC language were not changed for PA2.

package IC.Parser:

> IC.cup - The grammar and AST building instructions for IC language. Generates Parser.java and sym.java.
> IC.lex - Unchanged from PA1. Generates Lexer.java.
> LexicalError.java - Unchanged from PA1.
> Library.cup - The grammar and AST building instructions for libic.sig file. Generates LibraryParser.java.
> sym.java - Changed from PA1. Now auto-generated by JCUP when generating Parser from IC.cup
> SyntaxError.java - Helps with handling and printing errors during the parsing stage.
> Token.java - Unchanged from PA1.


package IC.AST:

Almost didn't change from the proposed AST.

________________
TESTING STRATEGY
----------------

Tested on Quicksort.ic


___________
THE GRAMMAR

In producing the grammar, we tried to stay close to the syntax of the IC language.
(taken from CUP's -dump_grammar option)

===== Terminals =====
[0]EOF [1]error [2]LP [3]RP [4]LB
[5]RB [6]LCBR [7]RCBR [8]SEMI [9]DOT
[10]COMMA [11]CLASS [12]EXTENDS [13]STATIC [14]VOID
[15]INT [16]BOOLEAN [17]STRING [18]RETURN [19]IF
[20]ELSE [21]WHILE [22]BREAK [23]CONTINUE [24]THIS
[25]NEW [26]LENGTH [27]TRUE [28]FALSE [29]NULL
[30]ID [31]CLASS_ID [32]INTEGER [33]QUOTE [34]ASSIGN
[35]EQUAL [36]NEQUAL [37]LT [38]GT [39]LTE
[40]GTE [41]PLUS [42]MINUS [43]MULTIPLY [44]DIVIDE
[45]MOD [46]UMINUS [47]LNEG [48]LAND [49]LOR


===== Non terminals =====
[0]program [1]class [2]class_list [3]field [4]fields
[5]fieldsInRow [6]method [7]type [8]formal [9]formals
[10]statement [11]stmt_list [12]ifStatement [13]elseStatement [14]expr
[15]exprlist [16]actualParams [17]classContentHelper [18]location [19]call
[20]staticCall [21]virtualCall

===== Productions =====
[0] program ::= class_list
[1] $START ::= program EOF
[2] class_list ::= class
[3] class_list ::= class_list class
[4] class ::= CLASS CLASS_ID EXTENDS CLASS_ID LCBR classContentHelper RCBR
[5] class ::= CLASS CLASS_ID LCBR classContentHelper RCBR
[6] class ::= CLASS CLASS_ID EXTENDS CLASS_ID LCBR RCBR
[7] class ::= CLASS CLASS_ID LCBR RCBR
[8] classContentHelper ::= fields
[9] classContentHelper ::= method
[10] classContentHelper ::= classContentHelper fields
[11] classContentHelper ::= classContentHelper method
[12] fields ::= fieldsInRow SEMI
[13] fieldsInRow ::= field
[14] fieldsInRow ::= fieldsInRow COMMA ID
[15] field ::= type ID
[16] method ::= STATIC type ID LP formals RP LCBR stmt_list RCBR
[17] method ::= type ID LP formals RP LCBR stmt_list RCBR
[18] method ::= STATIC type ID LP RP LCBR stmt_list RCBR
[19] method ::= type ID LP RP LCBR stmt_list RCBR
[20] method ::= STATIC VOID ID LP formals RP LCBR stmt_list RCBR
[21] method ::= VOID ID LP formals RP LCBR stmt_list RCBR
[22] method ::= STATIC VOID ID LP RP LCBR stmt_list RCBR
[23] method ::= VOID ID LP RP LCBR stmt_list RCBR
[24] method ::= STATIC type ID LP formals RP LCBR RCBR
[25] method ::= type ID LP formals RP LCBR RCBR
[26] method ::= STATIC type ID LP RP LCBR RCBR
[27] method ::= type ID LP RP LCBR RCBR
[28] method ::= STATIC VOID ID LP formals RP LCBR RCBR
[29] method ::= VOID ID LP formals RP LCBR RCBR
[30] method ::= STATIC VOID ID LP RP LCBR RCBR
[31] method ::= VOID ID LP RP LCBR RCBR
[32] formal ::= type ID
[33] formals ::= formal
[34] formals ::= formals COMMA formal
[35] type ::= INT
[36] type ::= STRING
[37] type ::= BOOLEAN
[38] type ::= CLASS_ID
[39] type ::= type LB RB
[40] expr ::= expr PLUS expr
[41] expr ::= expr MINUS expr
[42] expr ::= expr MULTIPLY expr
[43] expr ::= expr DIVIDE expr
[44] expr ::= expr MOD expr
[45] expr ::= expr EQUAL expr
[46] expr ::= expr NEQUAL expr
[47] expr ::= expr GT expr
[48] expr ::= expr GTE expr
[49] expr ::= expr LT expr
[50] expr ::= expr LTE expr
[51] expr ::= expr LAND expr
[52] expr ::= expr LOR expr
[53] expr ::= LNEG expr
[54] expr ::= MINUS expr
[55] expr ::= ID LP exprlist RP
[56] expr ::= expr DOT LENGTH
[57] expr ::= QUOTE
[58] expr ::= LP expr RP
[59] expr ::= NEW CLASS_ID LP RP
[60] expr ::= NEW type LB expr RB
[61] expr ::= location
[62] expr ::= call
[63] expr ::= THIS
[64] expr ::= INTEGER
[65] expr ::= TRUE
[66] expr ::= FALSE
[67] expr ::= NULL
[68] exprlist ::= expr
[69] exprlist ::= exprlist COMMA expr
[70] stmt_list ::= statement
[71] stmt_list ::= stmt_list statement
[72] ifStatement ::= IF LP expr RP statement
[73] elseStatement ::= ELSE statement
[74] statement ::= ifStatement
[75] statement ::= ifStatement elseStatement
[76] statement ::= WHILE LP expr RP statement
[77] statement ::= BREAK SEMI
[78] statement ::= CONTINUE SEMI
[79] statement ::= RETURN expr SEMI
[80] statement ::= RETURN SEMI
[81] statement ::= ID LP exprlist RP SEMI
[82] statement ::= type ID ASSIGN expr SEMI
[83] statement ::= type ID SEMI
[84] statement ::= call SEMI
[85] statement ::= location ASSIGN expr SEMI
[86] statement ::= LCBR stmt_list RCBR
[87] statement ::= LCBR RCBR
[88] location ::= ID
[89] location ::= expr DOT ID
[90] location ::= expr LB expr RB
[91] call ::= staticCall
[92] call ::= virtualCall
[93] staticCall ::= CLASS_ID DOT ID LP exprlist RP
[94] staticCall ::= CLASS_ID DOT ID LP RP
[95] virtualCall ::= expr DOT ID LP exprlist RP
[96] virtualCall ::= ID LP actualParams RP
[97] virtualCall ::= expr DOT ID LP RP
[98] virtualCall ::= ID LP RP